# name: CI/CD with k3d

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build-test-analyze:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#       - name: Run tests
#         run: |
#           if command -v pytest &> /dev/null; then
#             pytest || echo "No tests or tests failed — continuing"
#           else
#             echo "pytest not found — skipping tests"
#           fi

#       - name: SonarCloud Scan
#         uses: SonarSource/sonarcloud-github-action@v2
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         with:
#           args: >
#             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
#             -Dsonar.organization=${{ secrets.SONAR_ORG }}
#             -Dsonar.host.url=https://sonarcloud.io
#             -Dsonar.language=py
#             -Dsonar.sources=.
#             -Dsonar.exclusions=**/tests/**
#             -Dsonar.python.version=3.10
#             -Dsonar.sourceEncoding=UTF-8

#   docker-build-scan:
#     runs-on: ubuntu-latest
#     needs: build-test-analyze
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Build Docker image
#         run: |
#           docker build -t flask-devsecops:latest .

#       - name: Save image for next job
#         run: |
#           docker save flask-devsecops:latest -o flask-devsecops.tar

#       - name: Upload Docker image artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image
#           path: flask-devsecops.tar

#       - name: Trivy Scan (filesystem)
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: fs
#           scan-ref: .
#           format: table
#           exit-code: 0
#           severity: CRITICAL,HIGH

#       - name: Trivy Scan (image)
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: image
#           image-ref: flask-devsecops:latest
#           format: table
#           exit-code: 0
#           severity: CRITICAL,HIGH

#       - name: Snyk Scan (Python dependencies)
#         uses: snyk/actions/python@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           args: --file=requirements.txt --severity-threshold=high

#   deploy-and-test-k3d:
#     runs-on: ubuntu-latest
#     needs: docker-build-scan
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4  

#       - name: Install k3d and kubectl
#         run: |
#           curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
#           sudo apt-get update && sudo apt-get install -y kubectl

#       - name: Create k3d cluster
#         run: |
#           k3d cluster create ci-cluster --agents 1 --wait

#       - name: Download Docker image artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: docker-image
#           path: .

#       - name: Load and import image into k3d
#         run: |
#           docker load -i flask-devsecops.tar
#           k3d image import flask-devsecops:latest --cluster ci-cluster

#       - name: Debug: verify image in cluster
#         run: |
#           AGENT=$(docker ps --filter "name=k3d-ci-cluster-agent" --format "{{.Names}}" | head -n1)
#           docker exec "$AGENT" crictl images | grep flask-devsecops || echo "⚠️ Image not found"

#       - name: Deploy app to k3d
#         run: |
#           kubectl --context k3d-ci-cluster apply -f - <<EOF
#           apiVersion: apps/v1
#           kind: Deployment
#           metadata:
#             name: flask-devsecops
#           spec:
#             replicas: 1
#             selector:
#               matchLabels:
#                 app: flask-devsecops
#             template:
#               metadata:
#                 labels:
#                   app: flask-devsecops
#               spec:
#                 containers:
#                 - name: app
#                   image: flask-devsecops:latest
#                   ports:
#                   - containerPort: 5000
#           ---
#           apiVersion: v1
#           kind: Service
#           metadata:
#             name: flask-devsecops
#           spec:
#             type: ClusterIP
#             ports:
#             - port: 5000
#               targetPort: 5000
#             selector:
#               app: flask-devsecops
#           EOF

#       - name: Debug: pod status
#         run: |
#           sleep 5
#           kubectl --context k3d-ci-cluster get pods
#           kubectl --context k3d-ci-cluster describe pod -l app=flask-devsecops

#       - name: Wait for rollout
#         run: |
#           kubectl --context k3d-ci-cluster rollout status deployment/flask-devsecops --timeout=240s

#       - name: Test connectivity
#         run: |
#           kubectl --context k3d-ci-cluster port-forward svc/flask-devsecops 5000:5000 &
#           sleep 5
#           curl --fail http://localhost:5000 || exit 1

name: CI/CD with k3d (inside GitHub Actions)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-in-k3d:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k3d and kubectl
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          sudo apt-get update && sudo apt-get install -y kubectl

      - name: Create k3d cluster
        run: |
          k3d cluster create test-cluster --agents 1 --wait

      - name: Build Docker image
        run: |
          docker build -t flask-app:latest .

      - name: Import image into k3d
        run: |
          k3d image import flask-app:latest --cluster test-cluster

      - name: Deploy app to k3d
        run: |
          kubectl --context k3d-test-cluster apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flask-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: flask-app
            template:
              metadata:
                labels:
                  app: flask-app
              spec:
                containers:
                - name: app
                  image: flask-app:latest
                  ports:
                  - containerPort: 5000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: flask-app
          spec:
            type: ClusterIP
            ports:
            - port: 5000
              targetPort: 5000
            selector:
              app: flask-app
          EOF

      - name: Wait for rollout
        run: |
          kubectl --context k3d-test-cluster rollout status deployment/flask-app --timeout=360s

      - name: Test connectivity
        run: |
          kubectl --context k3d-test-cluster port-forward svc/flask-app 5000:5000 &
          sleep 5
          curl --fail http://localhost:5000 || exit 1