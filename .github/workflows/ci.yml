name: CI DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest || true

    # 🔹 SonarCloud Scan
    - name: SonarCloud Scan (Python)
      uses: SonarSource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ secrets.SONAR_ORG }}
          -Dsonar.language=py
          -Dsonar.sources=.
          -Dsonar.exclusions=**/tests/**
          -Dsonar.python.version=3.10
          -Dsonar.sourceEncoding=UTF-8

  docker-build-push-scan:
    runs-on: ubuntu-latest
    needs: build-test-analyze

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-devsecops:latest .

    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/flask-devsecops:latest

    # 🔹 Trivy Scan
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/flask-devsecops:latest
        format: table
        exit-code: 0
        vuln-type: os,library
        severity: CRITICAL,HIGH
  
  deploy:
    name: Deploy to k3d
    runs-on: ubuntu-latest
    needs: [build-test-analyze]  # или имя последнего успешного job
    steps:
    - name: Decode kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Deploy to k3d
      run: |
        kubectl --context k3d-dev-cluster apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: flask-devsecops
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: flask-devsecops
          template:
            metadata:
              labels:
                app: flask-devsecops
            spec:
              containers:
              - name: app
                image: ${{ secrets.DOCKER_USERNAME }}/flask-devsecops:latest
                ports:
                - containerPort: 5000
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: flask-devsecops
        spec:
          type: NodePort
          ports:
          - port: 5000
            targetPort: 5000
          selector:
            app: flask-devsecops
        EOF

    - name: Wait for rollout
      run: kubectl --context k3d-dev-cluster rollout status deployment/flask-devsecops

    - name: Get NodePort
      run: |
        NODE_PORT=$(kubectl --context k3d-dev-cluster get svc flask-devsecops -o jsonpath='{.spec.ports[0].nodePort}')
        
        echo "App available at: http://localhost:$NODE_PORT"